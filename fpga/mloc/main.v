/*
 * MIT License
 *
 * Copyright (c) 2023 Carnegie Mellon University
 *
 * This file is part of RoWild.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
*/

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="main_main,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.572444,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2596,HLS_SYN_DSP=0,HLS_SYN_FF=44333,HLS_SYN_LUT=51970,HLS_VERSION=2023_2}" *)

module main (
    ap_clk,
    ap_rst,
    ap_start,
    ap_done,
    ap_idle,
    ap_ready,
    ap_return
);

    parameter ap_ST_fsm_state1 = 13'd1;
    parameter ap_ST_fsm_state2 = 13'd2;
    parameter ap_ST_fsm_state3 = 13'd4;
    parameter ap_ST_fsm_state4 = 13'd8;
    parameter ap_ST_fsm_state5 = 13'd16;
    parameter ap_ST_fsm_state6 = 13'd32;
    parameter ap_ST_fsm_state7 = 13'd64;
    parameter ap_ST_fsm_state8 = 13'd128;
    parameter ap_ST_fsm_state9 = 13'd256;
    parameter ap_ST_fsm_state10 = 13'd512;
    parameter ap_ST_fsm_state11 = 13'd1024;
    parameter ap_ST_fsm_state12 = 13'd2048;
    parameter ap_ST_fsm_state13 = 13'd4096;

    input ap_clk;
    input ap_rst;
    input ap_start;
    output ap_done;
    output ap_idle;
    output ap_ready;
    output [31:0] ap_return;

    reg ap_done;
    reg ap_idle;
    reg ap_ready;

    (* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
    wire    ap_CS_fsm_state1;
    wire    ap_CS_fsm_state3;
    reg   [9:0] i_reg_326;
    wire    ap_CS_fsm_state8;
    wire   [31:0] odometryLog_0_q1;
    reg   [31:0] odometryLog_0_load_reg_364;
    wire    ap_CS_fsm_state9;
    wire   [31:0] odometryLog_1_q1;
    reg   [31:0] odometryLog_1_load_reg_369;
    wire   [31:0] odometryLog_2_q1;
    reg   [31:0] odometryLog_2_load_reg_374;
    wire   [31:0] odometryLog_0_q0;
    reg   [31:0] odometryLog_0_load_1_reg_379;
    wire   [31:0] odometryLog_1_q0;
    reg   [31:0] odometryLog_1_load_1_reg_384;
    wire   [31:0] odometryLog_2_q0;
    reg   [31:0] odometryLog_2_load_1_reg_389;
    reg   [16:0] pf_address0;
    reg    pf_ce0;
    reg   [31:0] pf_we0;
    reg   [255:0] pf_d0;
    wire   [255:0] pf_q0;
    reg   [16:0] pf_address1;
    reg    pf_ce1;
    reg   [31:0] pf_we1;
    reg   [255:0] pf_d1;
    wire   [255:0] pf_q1;
    wire   [9:0] odometryLog_0_address0;
    reg    odometryLog_0_ce0;
    wire   [9:0] odometryLog_0_address1;
    reg    odometryLog_0_ce1;
    wire   [9:0] odometryLog_1_address0;
    reg    odometryLog_1_ce0;
    wire   [9:0] odometryLog_1_address1;
    reg    odometryLog_1_ce1;
    wire   [9:0] odometryLog_2_address0;
    reg    odometryLog_2_ce0;
    wire   [9:0] odometryLog_2_address1;
    reg    odometryLog_2_ce1;
    wire   [31:0] laserLog_q0;
    wire    grp_main_Pipeline_1_fu_212_ap_start;
    wire    grp_main_Pipeline_1_fu_212_ap_done;
    wire    grp_main_Pipeline_1_fu_212_ap_idle;
    wire    grp_main_Pipeline_1_fu_212_ap_ready;
    wire   [16:0] grp_main_Pipeline_1_fu_212_pf_address0;
    wire    grp_main_Pipeline_1_fu_212_pf_ce0;
    wire   [31:0] grp_main_Pipeline_1_fu_212_pf_we0;
    wire   [255:0] grp_main_Pipeline_1_fu_212_pf_d0;
    wire    grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_ap_start;
    wire    grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_ap_done;
    wire    grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_ap_idle;
    wire    grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_ap_ready;
    wire   [16:0] grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_pf_address0;
    wire    grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_pf_ce0;
    wire   [31:0] grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_pf_we0;
    wire   [255:0] grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_pf_d0;
    wire    grp_updateMotion_fu_223_ap_start;
    wire    grp_updateMotion_fu_223_ap_done;
    wire    grp_updateMotion_fu_223_ap_idle;
    wire    grp_updateMotion_fu_223_ap_ready;
    wire   [16:0] grp_updateMotion_fu_223_pf_address0;
    wire    grp_updateMotion_fu_223_pf_ce0;
    wire   [31:0] grp_updateMotion_fu_223_pf_we0;
    wire   [255:0] grp_updateMotion_fu_223_pf_d0;
    wire   [31:0] grp_updateMotion_fu_223_grp_fu_394_p_din0;
    wire    grp_updateMotion_fu_223_grp_fu_394_p_ce;
    wire   [63:0] grp_updateMotion_fu_223_grp_fu_397_p_din0;
    wire   [63:0] grp_updateMotion_fu_223_grp_fu_397_p_din1;
    wire   [1:0] grp_updateMotion_fu_223_grp_fu_397_p_opcode;
    wire    grp_updateMotion_fu_223_grp_fu_397_p_ce;
    wire   [63:0] grp_updateMotion_fu_223_grp_fu_401_p_din0;
    wire   [63:0] grp_updateMotion_fu_223_grp_fu_401_p_din1;
    wire   [1:0] grp_updateMotion_fu_223_grp_fu_401_p_opcode;
    wire    grp_updateMotion_fu_223_grp_fu_401_p_ce;
    wire   [63:0] grp_updateMotion_fu_223_grp_fu_405_p_din0;
    wire   [63:0] grp_updateMotion_fu_223_grp_fu_405_p_din1;
    wire    grp_updateMotion_fu_223_grp_fu_405_p_ce;
    wire   [63:0] grp_updateMotion_fu_223_grp_fu_409_p_din0;
    wire   [63:0] grp_updateMotion_fu_223_grp_fu_409_p_din1;
    wire    grp_updateMotion_fu_223_grp_fu_409_p_ce;
    wire   [63:0] grp_updateMotion_fu_223_grp_fu_413_p_din0;
    wire   [63:0] grp_updateMotion_fu_223_grp_fu_413_p_din1;
    wire   [4:0] grp_updateMotion_fu_223_grp_fu_413_p_opcode;
    wire    grp_updateMotion_fu_223_grp_fu_413_p_ce;
    wire   [63:0] grp_updateMotion_fu_223_grp_fu_417_p_din0;
    wire   [63:0] grp_updateMotion_fu_223_grp_fu_417_p_din1;
    wire    grp_updateMotion_fu_223_grp_fu_417_p_ce;
    wire   [63:0] grp_updateMotion_fu_223_grp_sin_or_cos_double_s_fu_421_p_din1;
    wire  signed [0:0] grp_updateMotion_fu_223_grp_sin_or_cos_double_s_fu_421_p_din2;
    wire    grp_updateMotion_fu_223_grp_sin_or_cos_double_s_fu_421_p_start;
    wire   [63:0] grp_updateMotion_fu_223_grp_sin_or_cos_double_s_fu_432_p_din1;
    wire  signed [0:0] grp_updateMotion_fu_223_grp_sin_or_cos_double_s_fu_432_p_din2;
    wire    grp_updateMotion_fu_223_grp_sin_or_cos_double_s_fu_432_p_start;
    wire    grp_updateSensor_fu_250_ap_start;
    wire    grp_updateSensor_fu_250_ap_done;
    wire    grp_updateSensor_fu_250_ap_idle;
    wire    grp_updateSensor_fu_250_ap_ready;
    wire   [16:0] grp_updateSensor_fu_250_pf_address0;
    wire    grp_updateSensor_fu_250_pf_ce0;
    wire   [31:0] grp_updateSensor_fu_250_pf_we0;
    wire   [255:0] grp_updateSensor_fu_250_pf_d0;
    wire   [16:0] grp_updateSensor_fu_250_pf_address1;
    wire    grp_updateSensor_fu_250_pf_ce1;
    wire   [17:0] grp_updateSensor_fu_250_laserReading_address0;
    wire    grp_updateSensor_fu_250_laserReading_ce0;
    wire   [63:0] grp_updateSensor_fu_250_grp_fu_401_p_din0;
    wire   [63:0] grp_updateSensor_fu_250_grp_fu_401_p_din1;
    wire   [1:0] grp_updateSensor_fu_250_grp_fu_401_p_opcode;
    wire    grp_updateSensor_fu_250_grp_fu_401_p_ce;
    wire   [63:0] grp_updateSensor_fu_250_grp_fu_397_p_din0;
    wire   [63:0] grp_updateSensor_fu_250_grp_fu_397_p_din1;
    wire   [0:0] grp_updateSensor_fu_250_grp_fu_397_p_opcode;
    wire    grp_updateSensor_fu_250_grp_fu_397_p_ce;
    wire   [63:0] grp_updateSensor_fu_250_grp_fu_405_p_din0;
    wire   [63:0] grp_updateSensor_fu_250_grp_fu_405_p_din1;
    wire    grp_updateSensor_fu_250_grp_fu_405_p_ce;
    wire   [63:0] grp_updateSensor_fu_250_grp_fu_409_p_din0;
    wire   [63:0] grp_updateSensor_fu_250_grp_fu_409_p_din1;
    wire    grp_updateSensor_fu_250_grp_fu_409_p_ce;
    wire   [31:0] grp_updateSensor_fu_250_grp_fu_394_p_din0;
    wire    grp_updateSensor_fu_250_grp_fu_394_p_ce;
    wire   [63:0] grp_updateSensor_fu_250_grp_fu_413_p_din0;
    wire   [63:0] grp_updateSensor_fu_250_grp_fu_413_p_din1;
    wire   [4:0] grp_updateSensor_fu_250_grp_fu_413_p_opcode;
    wire    grp_updateSensor_fu_250_grp_fu_413_p_ce;
    wire   [63:0] grp_updateSensor_fu_250_grp_fu_417_p_din0;
    wire   [63:0] grp_updateSensor_fu_250_grp_fu_417_p_din1;
    wire    grp_updateSensor_fu_250_grp_fu_417_p_ce;
    wire   [63:0] grp_updateSensor_fu_250_grp_sin_or_cos_double_s_fu_421_p_din1;
    wire  signed [0:0] grp_updateSensor_fu_250_grp_sin_or_cos_double_s_fu_421_p_din2;
    wire    grp_updateSensor_fu_250_grp_sin_or_cos_double_s_fu_421_p_start;
    wire   [63:0] grp_updateSensor_fu_250_grp_sin_or_cos_double_s_fu_432_p_din1;
    wire  signed [0:0] grp_updateSensor_fu_250_grp_sin_or_cos_double_s_fu_432_p_din2;
    wire    grp_updateSensor_fu_250_grp_sin_or_cos_double_s_fu_432_p_start;
    reg    grp_sin_or_cos_double_s_fu_421_ap_start;
    wire    grp_sin_or_cos_double_s_fu_421_ap_done;
    wire    grp_sin_or_cos_double_s_fu_421_ap_idle;
    wire    grp_sin_or_cos_double_s_fu_421_ap_ready;
    reg   [63:0] grp_sin_or_cos_double_s_fu_421_t_in;
    reg   [0:0] grp_sin_or_cos_double_s_fu_421_do_cos;
    wire   [63:0] grp_sin_or_cos_double_s_fu_421_ap_return;
    reg    grp_sin_or_cos_double_s_fu_432_ap_start;
    wire    grp_sin_or_cos_double_s_fu_432_ap_done;
    wire    grp_sin_or_cos_double_s_fu_432_ap_idle;
    wire    grp_sin_or_cos_double_s_fu_432_ap_ready;
    reg   [63:0] grp_sin_or_cos_double_s_fu_432_t_in;
    reg   [0:0] grp_sin_or_cos_double_s_fu_432_do_cos;
    wire   [63:0] grp_sin_or_cos_double_s_fu_432_ap_return;
    reg    grp_main_Pipeline_1_fu_212_ap_start_reg;
    wire    ap_CS_fsm_state2;
    reg    grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_ap_start_reg;
    wire    ap_CS_fsm_state4;
    wire    ap_CS_fsm_state5;
    reg    grp_updateMotion_fu_223_ap_start_reg;
    wire    ap_CS_fsm_state10;
    wire    ap_CS_fsm_state11;
    reg    grp_updateSensor_fu_250_ap_start_reg;
    wire    ap_CS_fsm_state12;
    wire    ap_CS_fsm_state13;
    wire    ap_CS_fsm_state6;
    wire    ap_CS_fsm_state7;
    wire   [63:0] add_ln41_cast_fu_296_p1;
    wire   [0:0] icmp_ln40_fu_277_p2;
    wire   [63:0] zext_ln40_fu_283_p1;
    reg   [9:0] i_4_fu_82;
    wire   [9:0] add_ln40_fu_303_p2;
    wire   [9:0] add_ln41_fu_290_p2;
    wire   [63:0] grp_fu_394_p1;
    reg   [31:0] grp_fu_394_p0;
    reg    grp_fu_394_ce;
    wire   [63:0] grp_fu_397_p2;
    reg   [63:0] grp_fu_397_p0;
    reg   [63:0] grp_fu_397_p1;
    reg   [1:0] grp_fu_397_opcode;
    reg    grp_fu_397_ce;
    wire   [63:0] grp_fu_401_p2;
    reg   [63:0] grp_fu_401_p0;
    reg   [63:0] grp_fu_401_p1;
    reg   [1:0] grp_fu_401_opcode;
    reg    grp_fu_401_ce;
    wire   [63:0] grp_fu_405_p2;
    reg   [63:0] grp_fu_405_p0;
    reg   [63:0] grp_fu_405_p1;
    reg    grp_fu_405_ce;
    wire   [63:0] grp_fu_409_p2;
    reg   [63:0] grp_fu_409_p0;
    reg   [63:0] grp_fu_409_p1;
    reg    grp_fu_409_ce;
    wire   [0:0] grp_fu_413_p2;
    reg   [63:0] grp_fu_413_p0;
    reg   [63:0] grp_fu_413_p1;
    reg    grp_fu_413_ce;
    reg   [4:0] grp_fu_413_opcode;
    wire   [63:0] grp_fu_417_p2;
    reg   [63:0] grp_fu_417_p0;
    reg   [63:0] grp_fu_417_p1;
    reg    grp_fu_417_ce;
    reg   [12:0] ap_NS_fsm;
    reg    ap_ST_fsm_state1_blk;
    reg    ap_ST_fsm_state2_blk;
    wire    ap_ST_fsm_state3_blk;
    wire    ap_ST_fsm_state4_blk;
    reg    ap_ST_fsm_state5_blk;
    wire    ap_ST_fsm_state6_blk;
    wire    ap_ST_fsm_state7_blk;
    wire    ap_ST_fsm_state8_blk;
    wire    ap_ST_fsm_state9_blk;
    wire    ap_ST_fsm_state10_blk;
    reg    ap_ST_fsm_state11_blk;
    wire    ap_ST_fsm_state12_blk;
    reg    ap_ST_fsm_state13_blk;
    wire    ap_ce_reg;

    // power-on initialization
    initial begin
        #0 ap_CS_fsm = 13'd1;
        #0 grp_main_Pipeline_1_fu_212_ap_start_reg = 1'b0;
        #0 grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_ap_start_reg = 1'b0;
        #0 grp_updateMotion_fu_223_ap_start_reg = 1'b0;
        #0 grp_updateSensor_fu_250_ap_start_reg = 1'b0;
        #0 i_4_fu_82 = 10'd0;
    end

    main_pf_RAM_AUTO_1R1W #(
        .DataWidth(256),
        .AddressRange(80504),
        .AddressWidth(17)
    ) pf_U (
        .clk(ap_clk),
        .reset(ap_rst),
        .address0(pf_address0),
        .ce0(pf_ce0),
        .we0(pf_we0),
        .d0(pf_d0),
        .q0(pf_q0),
        .address1(pf_address1),
        .ce1(pf_ce1),
        .we1(pf_we1),
        .d1(pf_d1),
        .q1(pf_q1)
    );

    main_odometryLog_0_RAM_AUTO_1R1W #(
        .DataWidth(32),
        .AddressRange(1000),
        .AddressWidth(10)
    ) odometryLog_0_U (
        .clk(ap_clk),
        .reset(ap_rst),
        .address0(odometryLog_0_address0),
        .ce0(odometryLog_0_ce0),
        .q0(odometryLog_0_q0),
        .address1(odometryLog_0_address1),
        .ce1(odometryLog_0_ce1),
        .q1(odometryLog_0_q1)
    );

    main_odometryLog_0_RAM_AUTO_1R1W #(
        .DataWidth(32),
        .AddressRange(1000),
        .AddressWidth(10)
    ) odometryLog_1_U (
        .clk(ap_clk),
        .reset(ap_rst),
        .address0(odometryLog_1_address0),
        .ce0(odometryLog_1_ce0),
        .q0(odometryLog_1_q0),
        .address1(odometryLog_1_address1),
        .ce1(odometryLog_1_ce1),
        .q1(odometryLog_1_q1)
    );

    main_odometryLog_0_RAM_AUTO_1R1W #(
        .DataWidth(32),
        .AddressRange(1000),
        .AddressWidth(10)
    ) odometryLog_2_U (
        .clk(ap_clk),
        .reset(ap_rst),
        .address0(odometryLog_2_address0),
        .ce0(odometryLog_2_ce0),
        .q0(odometryLog_2_q0),
        .address1(odometryLog_2_address1),
        .ce1(odometryLog_2_ce1),
        .q1(odometryLog_2_q1)
    );

    main_laserLog_RAM_AUTO_1R1W #(
        .DataWidth(32),
        .AddressRange(180000),
        .AddressWidth(18)
    ) laserLog_U (
        .clk(ap_clk),
        .reset(ap_rst),
        .address0(grp_updateSensor_fu_250_laserReading_address0),
        .ce0(grp_updateSensor_fu_250_laserReading_ce0),
        .q0(laserLog_q0)
    );

    main_main_Pipeline_1 grp_main_Pipeline_1_fu_212 (
        .ap_clk(ap_clk),
        .ap_rst(ap_rst),
        .ap_start(grp_main_Pipeline_1_fu_212_ap_start),
        .ap_done(grp_main_Pipeline_1_fu_212_ap_done),
        .ap_idle(grp_main_Pipeline_1_fu_212_ap_idle),
        .ap_ready(grp_main_Pipeline_1_fu_212_ap_ready),
        .pf_address0(grp_main_Pipeline_1_fu_212_pf_address0),
        .pf_ce0(grp_main_Pipeline_1_fu_212_pf_ce0),
        .pf_we0(grp_main_Pipeline_1_fu_212_pf_we0),
        .pf_d0(grp_main_Pipeline_1_fu_212_pf_d0)
    );

    main_main_Pipeline_VITIS_LOOP_79_1 grp_main_Pipeline_VITIS_LOOP_79_1_fu_218 (
        .ap_clk(ap_clk),
        .ap_rst(ap_rst),
        .ap_start(grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_ap_start),
        .ap_done(grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_ap_done),
        .ap_idle(grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_ap_idle),
        .ap_ready(grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_ap_ready),
        .pf_address0(grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_pf_address0),
        .pf_ce0(grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_pf_ce0),
        .pf_we0(grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_pf_we0),
        .pf_d0(grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_pf_d0)
    );

    main_updateMotion grp_updateMotion_fu_223 (
        .ap_clk(ap_clk),
        .ap_rst(ap_rst),
        .ap_start(grp_updateMotion_fu_223_ap_start),
        .ap_done(grp_updateMotion_fu_223_ap_done),
        .ap_idle(grp_updateMotion_fu_223_ap_idle),
        .ap_ready(grp_updateMotion_fu_223_ap_ready),
        .pf_address0(grp_updateMotion_fu_223_pf_address0),
        .pf_ce0(grp_updateMotion_fu_223_pf_ce0),
        .pf_we0(grp_updateMotion_fu_223_pf_we0),
        .pf_d0(grp_updateMotion_fu_223_pf_d0),
        .pf_q0(pf_q0),
        .prevOdometry_0_0_val(odometryLog_0_load_reg_364),
        .prevOdometry_0_1_val(odometryLog_1_load_reg_369),
        .prevOdometry_0_2_val(odometryLog_2_load_reg_374),
        .currOdometry_0_0_val(odometryLog_0_load_1_reg_379),
        .currOdometry_0_1_val(odometryLog_1_load_1_reg_384),
        .currOdometry_0_2_val(odometryLog_2_load_1_reg_389),
        .grp_fu_394_p_din0(grp_updateMotion_fu_223_grp_fu_394_p_din0),
        .grp_fu_394_p_dout0(grp_fu_394_p1),
        .grp_fu_394_p_ce(grp_updateMotion_fu_223_grp_fu_394_p_ce),
        .grp_fu_397_p_din0(grp_updateMotion_fu_223_grp_fu_397_p_din0),
        .grp_fu_397_p_din1(grp_updateMotion_fu_223_grp_fu_397_p_din1),
        .grp_fu_397_p_opcode(grp_updateMotion_fu_223_grp_fu_397_p_opcode),
        .grp_fu_397_p_dout0(grp_fu_397_p2),
        .grp_fu_397_p_ce(grp_updateMotion_fu_223_grp_fu_397_p_ce),
        .grp_fu_401_p_din0(grp_updateMotion_fu_223_grp_fu_401_p_din0),
        .grp_fu_401_p_din1(grp_updateMotion_fu_223_grp_fu_401_p_din1),
        .grp_fu_401_p_opcode(grp_updateMotion_fu_223_grp_fu_401_p_opcode),
        .grp_fu_401_p_dout0(grp_fu_401_p2),
        .grp_fu_401_p_ce(grp_updateMotion_fu_223_grp_fu_401_p_ce),
        .grp_fu_405_p_din0(grp_updateMotion_fu_223_grp_fu_405_p_din0),
        .grp_fu_405_p_din1(grp_updateMotion_fu_223_grp_fu_405_p_din1),
        .grp_fu_405_p_dout0(grp_fu_405_p2),
        .grp_fu_405_p_ce(grp_updateMotion_fu_223_grp_fu_405_p_ce),
        .grp_fu_409_p_din0(grp_updateMotion_fu_223_grp_fu_409_p_din0),
        .grp_fu_409_p_din1(grp_updateMotion_fu_223_grp_fu_409_p_din1),
        .grp_fu_409_p_dout0(grp_fu_409_p2),
        .grp_fu_409_p_ce(grp_updateMotion_fu_223_grp_fu_409_p_ce),
        .grp_fu_413_p_din0(grp_updateMotion_fu_223_grp_fu_413_p_din0),
        .grp_fu_413_p_din1(grp_updateMotion_fu_223_grp_fu_413_p_din1),
        .grp_fu_413_p_opcode(grp_updateMotion_fu_223_grp_fu_413_p_opcode),
        .grp_fu_413_p_dout0(grp_fu_413_p2),
        .grp_fu_413_p_ce(grp_updateMotion_fu_223_grp_fu_413_p_ce),
        .grp_fu_417_p_din0(grp_updateMotion_fu_223_grp_fu_417_p_din0),
        .grp_fu_417_p_din1(grp_updateMotion_fu_223_grp_fu_417_p_din1),
        .grp_fu_417_p_dout0(grp_fu_417_p2),
        .grp_fu_417_p_ce(grp_updateMotion_fu_223_grp_fu_417_p_ce),
        .grp_sin_or_cos_double_s_fu_421_p_din1(grp_updateMotion_fu_223_grp_sin_or_cos_double_s_fu_421_p_din1),
        .grp_sin_or_cos_double_s_fu_421_p_din2(grp_updateMotion_fu_223_grp_sin_or_cos_double_s_fu_421_p_din2),
        .grp_sin_or_cos_double_s_fu_421_p_dout0(grp_sin_or_cos_double_s_fu_421_ap_return),
        .grp_sin_or_cos_double_s_fu_421_p_start(grp_updateMotion_fu_223_grp_sin_or_cos_double_s_fu_421_p_start),
        .grp_sin_or_cos_double_s_fu_421_p_ready(grp_sin_or_cos_double_s_fu_421_ap_ready),
        .grp_sin_or_cos_double_s_fu_421_p_done(grp_sin_or_cos_double_s_fu_421_ap_done),
        .grp_sin_or_cos_double_s_fu_421_p_idle(grp_sin_or_cos_double_s_fu_421_ap_idle),
        .grp_sin_or_cos_double_s_fu_432_p_din1(grp_updateMotion_fu_223_grp_sin_or_cos_double_s_fu_432_p_din1),
        .grp_sin_or_cos_double_s_fu_432_p_din2(grp_updateMotion_fu_223_grp_sin_or_cos_double_s_fu_432_p_din2),
        .grp_sin_or_cos_double_s_fu_432_p_dout0(grp_sin_or_cos_double_s_fu_432_ap_return),
        .grp_sin_or_cos_double_s_fu_432_p_start(grp_updateMotion_fu_223_grp_sin_or_cos_double_s_fu_432_p_start),
        .grp_sin_or_cos_double_s_fu_432_p_ready(grp_sin_or_cos_double_s_fu_432_ap_ready),
        .grp_sin_or_cos_double_s_fu_432_p_done(grp_sin_or_cos_double_s_fu_432_ap_done),
        .grp_sin_or_cos_double_s_fu_432_p_idle(grp_sin_or_cos_double_s_fu_432_ap_idle)
    );

    main_updateSensor grp_updateSensor_fu_250 (
        .ap_clk(ap_clk),
        .ap_rst(ap_rst),
        .ap_start(grp_updateSensor_fu_250_ap_start),
        .ap_done(grp_updateSensor_fu_250_ap_done),
        .ap_idle(grp_updateSensor_fu_250_ap_idle),
        .ap_ready(grp_updateSensor_fu_250_ap_ready),
        .pf_address0(grp_updateSensor_fu_250_pf_address0),
        .pf_ce0(grp_updateSensor_fu_250_pf_ce0),
        .pf_we0(grp_updateSensor_fu_250_pf_we0),
        .pf_d0(grp_updateSensor_fu_250_pf_d0),
        .pf_q0(pf_q0),
        .pf_address1(grp_updateSensor_fu_250_pf_address1),
        .pf_ce1(grp_updateSensor_fu_250_pf_ce1),
        .pf_q1(pf_q1),
        .laserReading_address0(grp_updateSensor_fu_250_laserReading_address0),
        .laserReading_ce0(grp_updateSensor_fu_250_laserReading_ce0),
        .laserReading_q0(laserLog_q0),
        .laserReading_offset(i_reg_326),
        .grp_fu_401_p_din0(grp_updateSensor_fu_250_grp_fu_401_p_din0),
        .grp_fu_401_p_din1(grp_updateSensor_fu_250_grp_fu_401_p_din1),
        .grp_fu_401_p_opcode(grp_updateSensor_fu_250_grp_fu_401_p_opcode),
        .grp_fu_401_p_dout0(grp_fu_401_p2),
        .grp_fu_401_p_ce(grp_updateSensor_fu_250_grp_fu_401_p_ce),
        .grp_fu_397_p_din0(grp_updateSensor_fu_250_grp_fu_397_p_din0),
        .grp_fu_397_p_din1(grp_updateSensor_fu_250_grp_fu_397_p_din1),
        .grp_fu_397_p_opcode(grp_updateSensor_fu_250_grp_fu_397_p_opcode),
        .grp_fu_397_p_dout0(grp_fu_397_p2),
        .grp_fu_397_p_ce(grp_updateSensor_fu_250_grp_fu_397_p_ce),
        .grp_fu_405_p_din0(grp_updateSensor_fu_250_grp_fu_405_p_din0),
        .grp_fu_405_p_din1(grp_updateSensor_fu_250_grp_fu_405_p_din1),
        .grp_fu_405_p_dout0(grp_fu_405_p2),
        .grp_fu_405_p_ce(grp_updateSensor_fu_250_grp_fu_405_p_ce),
        .grp_fu_409_p_din0(grp_updateSensor_fu_250_grp_fu_409_p_din0),
        .grp_fu_409_p_din1(grp_updateSensor_fu_250_grp_fu_409_p_din1),
        .grp_fu_409_p_dout0(grp_fu_409_p2),
        .grp_fu_409_p_ce(grp_updateSensor_fu_250_grp_fu_409_p_ce),
        .grp_fu_394_p_din0(grp_updateSensor_fu_250_grp_fu_394_p_din0),
        .grp_fu_394_p_dout0(grp_fu_394_p1),
        .grp_fu_394_p_ce(grp_updateSensor_fu_250_grp_fu_394_p_ce),
        .grp_fu_413_p_din0(grp_updateSensor_fu_250_grp_fu_413_p_din0),
        .grp_fu_413_p_din1(grp_updateSensor_fu_250_grp_fu_413_p_din1),
        .grp_fu_413_p_opcode(grp_updateSensor_fu_250_grp_fu_413_p_opcode),
        .grp_fu_413_p_dout0(grp_fu_413_p2),
        .grp_fu_413_p_ce(grp_updateSensor_fu_250_grp_fu_413_p_ce),
        .grp_fu_417_p_din0(grp_updateSensor_fu_250_grp_fu_417_p_din0),
        .grp_fu_417_p_din1(grp_updateSensor_fu_250_grp_fu_417_p_din1),
        .grp_fu_417_p_dout0(grp_fu_417_p2),
        .grp_fu_417_p_ce(grp_updateSensor_fu_250_grp_fu_417_p_ce),
        .grp_sin_or_cos_double_s_fu_421_p_din1(grp_updateSensor_fu_250_grp_sin_or_cos_double_s_fu_421_p_din1),
        .grp_sin_or_cos_double_s_fu_421_p_din2(grp_updateSensor_fu_250_grp_sin_or_cos_double_s_fu_421_p_din2),
        .grp_sin_or_cos_double_s_fu_421_p_dout0(grp_sin_or_cos_double_s_fu_421_ap_return),
        .grp_sin_or_cos_double_s_fu_421_p_start(grp_updateSensor_fu_250_grp_sin_or_cos_double_s_fu_421_p_start),
        .grp_sin_or_cos_double_s_fu_421_p_ready(grp_sin_or_cos_double_s_fu_421_ap_ready),
        .grp_sin_or_cos_double_s_fu_421_p_done(grp_sin_or_cos_double_s_fu_421_ap_done),
        .grp_sin_or_cos_double_s_fu_421_p_idle(grp_sin_or_cos_double_s_fu_421_ap_idle),
        .grp_sin_or_cos_double_s_fu_432_p_din1(grp_updateSensor_fu_250_grp_sin_or_cos_double_s_fu_432_p_din1),
        .grp_sin_or_cos_double_s_fu_432_p_din2(grp_updateSensor_fu_250_grp_sin_or_cos_double_s_fu_432_p_din2),
        .grp_sin_or_cos_double_s_fu_432_p_dout0(grp_sin_or_cos_double_s_fu_432_ap_return),
        .grp_sin_or_cos_double_s_fu_432_p_start(grp_updateSensor_fu_250_grp_sin_or_cos_double_s_fu_432_p_start),
        .grp_sin_or_cos_double_s_fu_432_p_ready(grp_sin_or_cos_double_s_fu_432_ap_ready),
        .grp_sin_or_cos_double_s_fu_432_p_done(grp_sin_or_cos_double_s_fu_432_ap_done),
        .grp_sin_or_cos_double_s_fu_432_p_idle(grp_sin_or_cos_double_s_fu_432_ap_idle)
    );

    main_sin_or_cos_double_s grp_sin_or_cos_double_s_fu_421 (
        .ap_clk(ap_clk),
        .ap_rst(ap_rst),
        .ap_start(grp_sin_or_cos_double_s_fu_421_ap_start),
        .ap_done(grp_sin_or_cos_double_s_fu_421_ap_done),
        .ap_idle(grp_sin_or_cos_double_s_fu_421_ap_idle),
        .ap_ready(grp_sin_or_cos_double_s_fu_421_ap_ready),
        .t_in(grp_sin_or_cos_double_s_fu_421_t_in),
        .do_cos(grp_sin_or_cos_double_s_fu_421_do_cos),
        .ap_return(grp_sin_or_cos_double_s_fu_421_ap_return)
    );

    main_sin_or_cos_double_s grp_sin_or_cos_double_s_fu_432 (
        .ap_clk(ap_clk),
        .ap_rst(ap_rst),
        .ap_start(grp_sin_or_cos_double_s_fu_432_ap_start),
        .ap_done(grp_sin_or_cos_double_s_fu_432_ap_done),
        .ap_idle(grp_sin_or_cos_double_s_fu_432_ap_idle),
        .ap_ready(grp_sin_or_cos_double_s_fu_432_ap_ready),
        .t_in(grp_sin_or_cos_double_s_fu_432_t_in),
        .do_cos(grp_sin_or_cos_double_s_fu_432_do_cos),
        .ap_return(grp_sin_or_cos_double_s_fu_432_ap_return)
    );

    main_fpext_32ns_64_2_no_dsp_1 #(
        .ID(1),
        .NUM_STAGE(2),
        .din0_WIDTH(32),
        .dout_WIDTH(64)
    ) fpext_32ns_64_2_no_dsp_1_U211 (
        .clk(ap_clk),
        .reset(ap_rst),
        .din0(grp_fu_394_p0),
        .ce(grp_fu_394_ce),
        .dout(grp_fu_394_p1)
    );

    main_dadddsub_64ns_64ns_64_7_full_dsp_1 #(
        .ID(1),
        .NUM_STAGE(7),
        .din0_WIDTH(64),
        .din1_WIDTH(64),
        .dout_WIDTH(64)
    ) dadddsub_64ns_64ns_64_7_full_dsp_1_U212 (
        .clk(ap_clk),
        .reset(ap_rst),
        .din0(grp_fu_397_p0),
        .din1(grp_fu_397_p1),
        .opcode(grp_fu_397_opcode),
        .ce(grp_fu_397_ce),
        .dout(grp_fu_397_p2)
    );

    main_dadddsub_64ns_64ns_64_7_full_dsp_1 #(
        .ID(1),
        .NUM_STAGE(7),
        .din0_WIDTH(64),
        .din1_WIDTH(64),
        .dout_WIDTH(64)
    ) dadddsub_64ns_64ns_64_7_full_dsp_1_U213 (
        .clk(ap_clk),
        .reset(ap_rst),
        .din0(grp_fu_401_p0),
        .din1(grp_fu_401_p1),
        .opcode(grp_fu_401_opcode),
        .ce(grp_fu_401_ce),
        .dout(grp_fu_401_p2)
    );

    main_dmul_64ns_64ns_64_7_max_dsp_1 #(
        .ID(1),
        .NUM_STAGE(7),
        .din0_WIDTH(64),
        .din1_WIDTH(64),
        .dout_WIDTH(64)
    ) dmul_64ns_64ns_64_7_max_dsp_1_U214 (
        .clk(ap_clk),
        .reset(ap_rst),
        .din0(grp_fu_405_p0),
        .din1(grp_fu_405_p1),
        .ce(grp_fu_405_ce),
        .dout(grp_fu_405_p2)
    );

    main_dmul_64ns_64ns_64_7_max_dsp_1 #(
        .ID(1),
        .NUM_STAGE(7),
        .din0_WIDTH(64),
        .din1_WIDTH(64),
        .dout_WIDTH(64)
    ) dmul_64ns_64ns_64_7_max_dsp_1_U215 (
        .clk(ap_clk),
        .reset(ap_rst),
        .din0(grp_fu_409_p0),
        .din1(grp_fu_409_p1),
        .ce(grp_fu_409_ce),
        .dout(grp_fu_409_p2)
    );

    main_dcmp_64ns_64ns_1_2_no_dsp_1 #(
        .ID(1),
        .NUM_STAGE(2),
        .din0_WIDTH(64),
        .din1_WIDTH(64),
        .dout_WIDTH(1)
    ) dcmp_64ns_64ns_1_2_no_dsp_1_U216 (
        .clk(ap_clk),
        .reset(ap_rst),
        .din0(grp_fu_413_p0),
        .din1(grp_fu_413_p1),
        .ce(grp_fu_413_ce),
        .opcode(grp_fu_413_opcode),
        .dout(grp_fu_413_p2)
    );

    main_dsqrt_64ns_64ns_64_57_no_dsp_1 #(
        .ID(1),
        .NUM_STAGE(57),
        .din0_WIDTH(64),
        .din1_WIDTH(64),
        .dout_WIDTH(64)
    ) dsqrt_64ns_64ns_64_57_no_dsp_1_U217 (
        .clk(ap_clk),
        .reset(ap_rst),
        .din0(grp_fu_417_p0),
        .din1(grp_fu_417_p1),
        .ce(grp_fu_417_ce),
        .dout(grp_fu_417_p2)
    );

    always @(posedge ap_clk) begin
        if (ap_rst == 1'b1) begin
            ap_CS_fsm <= ap_ST_fsm_state1;
        end else begin
            ap_CS_fsm <= ap_NS_fsm;
        end
    end

    always @(posedge ap_clk) begin
        if (ap_rst == 1'b1) begin
            grp_main_Pipeline_1_fu_212_ap_start_reg <= 1'b0;
        end else begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                grp_main_Pipeline_1_fu_212_ap_start_reg <= 1'b1;
            end else if ((grp_main_Pipeline_1_fu_212_ap_ready == 1'b1)) begin
                grp_main_Pipeline_1_fu_212_ap_start_reg <= 1'b0;
            end
        end
    end

    always @(posedge ap_clk) begin
        if (ap_rst == 1'b1) begin
            grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_ap_start_reg <= 1'b0;
        end else begin
            if ((1'b1 == ap_CS_fsm_state4)) begin
                grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_ap_start_reg <= 1'b1;
            end else if ((grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_ap_ready == 1'b1)) begin
                grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_ap_start_reg <= 1'b0;
            end
        end
    end

    always @(posedge ap_clk) begin
        if (ap_rst == 1'b1) begin
            grp_updateMotion_fu_223_ap_start_reg <= 1'b0;
        end else begin
            if ((1'b1 == ap_CS_fsm_state10)) begin
                grp_updateMotion_fu_223_ap_start_reg <= 1'b1;
            end else if ((grp_updateMotion_fu_223_ap_ready == 1'b1)) begin
                grp_updateMotion_fu_223_ap_start_reg <= 1'b0;
            end
        end
    end

    always @(posedge ap_clk) begin
        if (ap_rst == 1'b1) begin
            grp_updateSensor_fu_250_ap_start_reg <= 1'b0;
        end else begin
            if ((1'b1 == ap_CS_fsm_state12)) begin
                grp_updateSensor_fu_250_ap_start_reg <= 1'b1;
            end else if ((grp_updateSensor_fu_250_ap_ready == 1'b1)) begin
                grp_updateSensor_fu_250_ap_start_reg <= 1'b0;
            end
        end
    end

    always @(posedge ap_clk) begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            i_4_fu_82 <= 10'd1;
        end else if (((icmp_ln40_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
            i_4_fu_82 <= add_ln40_fu_303_p2;
        end
    end

    always @(posedge ap_clk) begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            i_reg_326 <= i_4_fu_82;
        end
    end

    always @(posedge ap_clk) begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            odometryLog_0_load_1_reg_379 <= odometryLog_0_q0;
            odometryLog_0_load_reg_364   <= odometryLog_0_q1;
            odometryLog_1_load_1_reg_384 <= odometryLog_1_q0;
            odometryLog_1_load_reg_369   <= odometryLog_1_q1;
            odometryLog_2_load_1_reg_389 <= odometryLog_2_q0;
            odometryLog_2_load_reg_374   <= odometryLog_2_q1;
        end
    end

    assign ap_ST_fsm_state10_blk = 1'b0;

    always @(*) begin
        if ((grp_updateMotion_fu_223_ap_done == 1'b0)) begin
            ap_ST_fsm_state11_blk = 1'b1;
        end else begin
            ap_ST_fsm_state11_blk = 1'b0;
        end
    end

    assign ap_ST_fsm_state12_blk = 1'b0;

    always @(*) begin
        if ((grp_updateSensor_fu_250_ap_done == 1'b0)) begin
            ap_ST_fsm_state13_blk = 1'b1;
        end else begin
            ap_ST_fsm_state13_blk = 1'b0;
        end
    end

    always @(*) begin
        if ((ap_start == 1'b0)) begin
            ap_ST_fsm_state1_blk = 1'b1;
        end else begin
            ap_ST_fsm_state1_blk = 1'b0;
        end
    end

    always @(*) begin
        if ((grp_main_Pipeline_1_fu_212_ap_done == 1'b0)) begin
            ap_ST_fsm_state2_blk = 1'b1;
        end else begin
            ap_ST_fsm_state2_blk = 1'b0;
        end
    end

    assign ap_ST_fsm_state3_blk = 1'b0;

    assign ap_ST_fsm_state4_blk = 1'b0;

    always @(*) begin
        if ((grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_ap_done == 1'b0)) begin
            ap_ST_fsm_state5_blk = 1'b1;
        end else begin
            ap_ST_fsm_state5_blk = 1'b0;
        end
    end

    assign ap_ST_fsm_state6_blk = 1'b0;

    assign ap_ST_fsm_state7_blk = 1'b0;

    assign ap_ST_fsm_state8_blk = 1'b0;

    assign ap_ST_fsm_state9_blk = 1'b0;

    always @(*) begin
        if (((icmp_ln40_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_done = 1'b1;
        end else begin
            ap_done = 1'b0;
        end
    end

    always @(*) begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
            ap_idle = 1'b1;
        end else begin
            ap_idle = 1'b0;
        end
    end

    always @(*) begin
        if (((icmp_ln40_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_ready = 1'b1;
        end else begin
            ap_ready = 1'b0;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_394_ce = grp_updateSensor_fu_250_grp_fu_394_p_ce;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_394_ce = grp_updateMotion_fu_223_grp_fu_394_p_ce;
        end else begin
            grp_fu_394_ce = 1'b1;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_394_p0 = grp_updateSensor_fu_250_grp_fu_394_p_din0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_394_p0 = grp_updateMotion_fu_223_grp_fu_394_p_din0;
        end else begin
            grp_fu_394_p0 = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_397_ce = grp_updateSensor_fu_250_grp_fu_397_p_ce;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_397_ce = grp_updateMotion_fu_223_grp_fu_397_p_ce;
        end else begin
            grp_fu_397_ce = 1'b1;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_397_opcode = grp_updateSensor_fu_250_grp_fu_397_p_opcode;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_397_opcode = grp_updateMotion_fu_223_grp_fu_397_p_opcode;
        end else begin
            grp_fu_397_opcode = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_397_p0 = grp_updateSensor_fu_250_grp_fu_397_p_din0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_397_p0 = grp_updateMotion_fu_223_grp_fu_397_p_din0;
        end else begin
            grp_fu_397_p0 = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_397_p1 = grp_updateSensor_fu_250_grp_fu_397_p_din1;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_397_p1 = grp_updateMotion_fu_223_grp_fu_397_p_din1;
        end else begin
            grp_fu_397_p1 = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_401_ce = grp_updateSensor_fu_250_grp_fu_401_p_ce;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_401_ce = grp_updateMotion_fu_223_grp_fu_401_p_ce;
        end else begin
            grp_fu_401_ce = 1'b1;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_401_opcode = grp_updateSensor_fu_250_grp_fu_401_p_opcode;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_401_opcode = grp_updateMotion_fu_223_grp_fu_401_p_opcode;
        end else begin
            grp_fu_401_opcode = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_401_p0 = grp_updateSensor_fu_250_grp_fu_401_p_din0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_401_p0 = grp_updateMotion_fu_223_grp_fu_401_p_din0;
        end else begin
            grp_fu_401_p0 = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_401_p1 = grp_updateSensor_fu_250_grp_fu_401_p_din1;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_401_p1 = grp_updateMotion_fu_223_grp_fu_401_p_din1;
        end else begin
            grp_fu_401_p1 = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_405_ce = grp_updateSensor_fu_250_grp_fu_405_p_ce;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_405_ce = grp_updateMotion_fu_223_grp_fu_405_p_ce;
        end else begin
            grp_fu_405_ce = 1'b1;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_405_p0 = grp_updateSensor_fu_250_grp_fu_405_p_din0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_405_p0 = grp_updateMotion_fu_223_grp_fu_405_p_din0;
        end else begin
            grp_fu_405_p0 = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_405_p1 = grp_updateSensor_fu_250_grp_fu_405_p_din1;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_405_p1 = grp_updateMotion_fu_223_grp_fu_405_p_din1;
        end else begin
            grp_fu_405_p1 = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_409_ce = grp_updateSensor_fu_250_grp_fu_409_p_ce;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_409_ce = grp_updateMotion_fu_223_grp_fu_409_p_ce;
        end else begin
            grp_fu_409_ce = 1'b1;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_409_p0 = grp_updateSensor_fu_250_grp_fu_409_p_din0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_409_p0 = grp_updateMotion_fu_223_grp_fu_409_p_din0;
        end else begin
            grp_fu_409_p0 = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_409_p1 = grp_updateSensor_fu_250_grp_fu_409_p_din1;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_409_p1 = grp_updateMotion_fu_223_grp_fu_409_p_din1;
        end else begin
            grp_fu_409_p1 = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_413_ce = grp_updateSensor_fu_250_grp_fu_413_p_ce;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_413_ce = grp_updateMotion_fu_223_grp_fu_413_p_ce;
        end else begin
            grp_fu_413_ce = 1'b1;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_413_opcode = grp_updateSensor_fu_250_grp_fu_413_p_opcode;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_413_opcode = grp_updateMotion_fu_223_grp_fu_413_p_opcode;
        end else begin
            grp_fu_413_opcode = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_413_p0 = grp_updateSensor_fu_250_grp_fu_413_p_din0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_413_p0 = grp_updateMotion_fu_223_grp_fu_413_p_din0;
        end else begin
            grp_fu_413_p0 = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_413_p1 = grp_updateSensor_fu_250_grp_fu_413_p_din1;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_413_p1 = grp_updateMotion_fu_223_grp_fu_413_p_din1;
        end else begin
            grp_fu_413_p1 = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_417_ce = grp_updateSensor_fu_250_grp_fu_417_p_ce;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_417_ce = grp_updateMotion_fu_223_grp_fu_417_p_ce;
        end else begin
            grp_fu_417_ce = 1'b1;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_417_p0 = grp_updateSensor_fu_250_grp_fu_417_p_din0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_417_p0 = grp_updateMotion_fu_223_grp_fu_417_p_din0;
        end else begin
            grp_fu_417_p0 = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_fu_417_p1 = grp_updateSensor_fu_250_grp_fu_417_p_din1;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_fu_417_p1 = grp_updateMotion_fu_223_grp_fu_417_p_din1;
        end else begin
            grp_fu_417_p1 = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_sin_or_cos_double_s_fu_421_ap_start = grp_updateSensor_fu_250_grp_sin_or_cos_double_s_fu_421_p_start;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_sin_or_cos_double_s_fu_421_ap_start = grp_updateMotion_fu_223_grp_sin_or_cos_double_s_fu_421_p_start;
        end else begin
            grp_sin_or_cos_double_s_fu_421_ap_start = 1'b0;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_sin_or_cos_double_s_fu_421_do_cos = grp_updateSensor_fu_250_grp_sin_or_cos_double_s_fu_421_p_din2;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_sin_or_cos_double_s_fu_421_do_cos = grp_updateMotion_fu_223_grp_sin_or_cos_double_s_fu_421_p_din2;
        end else begin
            grp_sin_or_cos_double_s_fu_421_do_cos = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_sin_or_cos_double_s_fu_421_t_in = grp_updateSensor_fu_250_grp_sin_or_cos_double_s_fu_421_p_din1;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_sin_or_cos_double_s_fu_421_t_in = grp_updateMotion_fu_223_grp_sin_or_cos_double_s_fu_421_p_din1;
        end else begin
            grp_sin_or_cos_double_s_fu_421_t_in = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_sin_or_cos_double_s_fu_432_ap_start = grp_updateSensor_fu_250_grp_sin_or_cos_double_s_fu_432_p_start;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_sin_or_cos_double_s_fu_432_ap_start = grp_updateMotion_fu_223_grp_sin_or_cos_double_s_fu_432_p_start;
        end else begin
            grp_sin_or_cos_double_s_fu_432_ap_start = 1'b0;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_sin_or_cos_double_s_fu_432_do_cos = grp_updateSensor_fu_250_grp_sin_or_cos_double_s_fu_432_p_din2;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_sin_or_cos_double_s_fu_432_do_cos = grp_updateMotion_fu_223_grp_sin_or_cos_double_s_fu_432_p_din2;
        end else begin
            grp_sin_or_cos_double_s_fu_432_do_cos = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_sin_or_cos_double_s_fu_432_t_in = grp_updateSensor_fu_250_grp_sin_or_cos_double_s_fu_432_p_din1;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_sin_or_cos_double_s_fu_432_t_in = grp_updateMotion_fu_223_grp_sin_or_cos_double_s_fu_432_p_din1;
        end else begin
            grp_sin_or_cos_double_s_fu_432_t_in = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            odometryLog_0_ce0 = 1'b1;
        end else begin
            odometryLog_0_ce0 = 1'b0;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            odometryLog_0_ce1 = 1'b1;
        end else begin
            odometryLog_0_ce1 = 1'b0;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            odometryLog_1_ce0 = 1'b1;
        end else begin
            odometryLog_1_ce0 = 1'b0;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            odometryLog_1_ce1 = 1'b1;
        end else begin
            odometryLog_1_ce1 = 1'b0;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            odometryLog_2_ce0 = 1'b1;
        end else begin
            odometryLog_2_ce0 = 1'b0;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            odometryLog_2_ce1 = 1'b1;
        end else begin
            odometryLog_2_ce1 = 1'b0;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            pf_address0 = 64'd80502;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            pf_address0 = 64'd80501;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            pf_address0 = 64'd80503;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            pf_address0 = grp_updateSensor_fu_250_pf_address0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            pf_address0 = grp_updateMotion_fu_223_pf_address0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            pf_address0 = grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_pf_address0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            pf_address0 = grp_main_Pipeline_1_fu_212_pf_address0;
        end else begin
            pf_address0 = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            pf_address1 = 64'd80503;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            pf_address1 = 64'd80500;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            pf_address1 = grp_updateSensor_fu_250_pf_address1;
        end else begin
            pf_address1 = 'bx;
        end
    end

    always @(*) begin
        if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
            pf_ce0 = 1'b1;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            pf_ce0 = grp_updateSensor_fu_250_pf_ce0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            pf_ce0 = grp_updateMotion_fu_223_pf_ce0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            pf_ce0 = grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_pf_ce0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            pf_ce0 = grp_main_Pipeline_1_fu_212_pf_ce0;
        end else begin
            pf_ce0 = 1'b0;
        end
    end

    always @(*) begin
        if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
            pf_ce1 = 1'b1;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            pf_ce1 = grp_updateSensor_fu_250_pf_ce1;
        end else begin
            pf_ce1 = 1'b0;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            pf_d0 = 256'd29201123151358552412670844564593818920585590995431917604390952422976650215424;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            pf_d0 = 256'd29011628803661070693320277415665582310089998401570762315323793070533715689472;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            pf_d0 = 256'd1461501637671185285124623296184279446205289725952;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            pf_d0 = grp_updateSensor_fu_250_pf_d0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            pf_d0 = grp_updateMotion_fu_223_pf_d0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            pf_d0 = grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_pf_d0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            pf_d0 = grp_main_Pipeline_1_fu_212_pf_d0;
        end else begin
            pf_d0 = 'bx;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            pf_d1 = 256'd85366552651171101040669890148707598336;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            pf_d1 = 256'd28908444935078013050983453535776868174299718613379150504229795234960632818172;
        end else begin
            pf_d1 = 'bx;
        end
    end

    always @(*) begin
        if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
            pf_we0 = 32'd4294967295;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            pf_we0 = 32'd16711935;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            pf_we0 = grp_updateSensor_fu_250_pf_we0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            pf_we0 = grp_updateMotion_fu_223_pf_we0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            pf_we0 = grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_pf_we0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            pf_we0 = grp_main_Pipeline_1_fu_212_pf_we0;
        end else begin
            pf_we0 = 32'd0;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            pf_we1 = 32'd65280;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            pf_we1 = 32'd4294967295;
        end else begin
            pf_we1 = 32'd0;
        end
    end

    always @(*) begin
        case (ap_CS_fsm)
            ap_ST_fsm_state1: begin
                if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                    ap_NS_fsm = ap_ST_fsm_state2;
                end else begin
                    ap_NS_fsm = ap_ST_fsm_state1;
                end
            end
            ap_ST_fsm_state2: begin
                if (((1'b1 == ap_CS_fsm_state2) & (grp_main_Pipeline_1_fu_212_ap_done == 1'b1))) begin
                    ap_NS_fsm = ap_ST_fsm_state3;
                end else begin
                    ap_NS_fsm = ap_ST_fsm_state2;
                end
            end
            ap_ST_fsm_state3: begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
            ap_ST_fsm_state4: begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
            ap_ST_fsm_state5: begin
                if (((1'b1 == ap_CS_fsm_state5) & (grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_ap_done == 1'b1))) begin
                    ap_NS_fsm = ap_ST_fsm_state6;
                end else begin
                    ap_NS_fsm = ap_ST_fsm_state5;
                end
            end
            ap_ST_fsm_state6: begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
            ap_ST_fsm_state7: begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
            ap_ST_fsm_state8: begin
                if (((icmp_ln40_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                    ap_NS_fsm = ap_ST_fsm_state1;
                end else begin
                    ap_NS_fsm = ap_ST_fsm_state9;
                end
            end
            ap_ST_fsm_state9: begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
            ap_ST_fsm_state10: begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
            ap_ST_fsm_state11: begin
                if (((1'b1 == ap_CS_fsm_state11) & (grp_updateMotion_fu_223_ap_done == 1'b1))) begin
                    ap_NS_fsm = ap_ST_fsm_state12;
                end else begin
                    ap_NS_fsm = ap_ST_fsm_state11;
                end
            end
            ap_ST_fsm_state12: begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
            ap_ST_fsm_state13: begin
                if (((grp_updateSensor_fu_250_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                    ap_NS_fsm = ap_ST_fsm_state8;
                end else begin
                    ap_NS_fsm = ap_ST_fsm_state13;
                end
            end
            default: begin
                ap_NS_fsm = 'bx;
            end
        endcase
    end

    assign add_ln40_fu_303_p2 = (i_4_fu_82 + 10'd1);

    assign add_ln41_cast_fu_296_p1 = add_ln41_fu_290_p2;

    assign add_ln41_fu_290_p2 = ($signed(i_4_fu_82) + $signed(10'd1023));

    assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

    assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

    assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

    assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

    assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

    assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

    assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

    assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

    assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

    assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

    assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

    assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

    assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

    assign ap_return = 32'd0;

    assign grp_main_Pipeline_1_fu_212_ap_start = grp_main_Pipeline_1_fu_212_ap_start_reg;

    assign grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_ap_start = grp_main_Pipeline_VITIS_LOOP_79_1_fu_218_ap_start_reg;

    assign grp_updateMotion_fu_223_ap_start = grp_updateMotion_fu_223_ap_start_reg;

    assign grp_updateSensor_fu_250_ap_start = grp_updateSensor_fu_250_ap_start_reg;

    assign icmp_ln40_fu_277_p2 = ((i_4_fu_82 == 10'd1000) ? 1'b1 : 1'b0);

    assign odometryLog_0_address0 = zext_ln40_fu_283_p1;

    assign odometryLog_0_address1 = add_ln41_cast_fu_296_p1;

    assign odometryLog_1_address0 = zext_ln40_fu_283_p1;

    assign odometryLog_1_address1 = add_ln41_cast_fu_296_p1;

    assign odometryLog_2_address0 = zext_ln40_fu_283_p1;

    assign odometryLog_2_address1 = add_ln41_cast_fu_296_p1;

    assign zext_ln40_fu_283_p1 = i_4_fu_82;

endmodule  //main
