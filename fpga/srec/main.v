/*
 * MIT License
 *
 * Copyright (c) 2023 Carnegie Mellon University
 *
 * This file is part of RoWild.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
*/

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="main_main,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=1000.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=664.393000,HLS_SYN_LAT=44,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=2933,HLS_SYN_LUT=85272,HLS_VERSION=2023_2}" *)

module main (
    ap_clk,
    ap_rst,
    ap_start,
    ap_done,
    ap_idle,
    ap_ready,
    ap_return
);

    parameter ap_ST_fsm_state1 = 4'd1;
    parameter ap_ST_fsm_pp0_stage0 = 4'd2;
    parameter ap_ST_fsm_state4 = 4'd4;
    parameter ap_ST_fsm_state5 = 4'd8;

    input ap_clk;
    input ap_rst;
    input ap_start;
    output ap_done;
    output ap_idle;
    output ap_ready;
    output [31:0] ap_return;

    reg ap_done;
    reg ap_idle;
    reg ap_ready;

    (* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
    wire    ap_CS_fsm_state1;
    wire   [3:0] tCameraToWorld_address0;
    reg    tCameraToWorld_ce0;
    wire   [63:0] tCameraToWorld_q0;
    wire   [63:0] loop_index_cast_cast_fu_102_p1;
    reg   [63:0] loop_index_cast_cast_reg_122;
    wire    ap_CS_fsm_pp0_stage0;
    wire    ap_block_pp0_stage0_11001;
    reg    ap_enable_reg_pp0_iter0;
    wire    ap_block_pp0_stage0_subdone;
    wire   [0:0] exitcond1_fu_86_p2;
    reg    ap_condition_pp0_exit_iter0_state2;
    reg    ap_enable_reg_pp0_iter1;
    reg   [3:0] tCameraToWorld_1_address0;
    reg    tCameraToWorld_1_ce0;
    reg    tCameraToWorld_1_we0;
    wire   [63:0] tCameraToWorld_1_q0;
    reg    tCameraToWorld_1_ce1;
    wire   [63:0] tCameraToWorld_1_q1;
    wire    grp_invert4x4Matrix_double_s_fu_72_ap_start;
    wire    grp_invert4x4Matrix_double_s_fu_72_ap_done;
    wire    grp_invert4x4Matrix_double_s_fu_72_ap_idle;
    wire    grp_invert4x4Matrix_double_s_fu_72_ap_ready;
    wire   [3:0] grp_invert4x4Matrix_double_s_fu_72_m_address0;
    wire    grp_invert4x4Matrix_double_s_fu_72_m_ce0;
    wire   [3:0] grp_invert4x4Matrix_double_s_fu_72_m_address1;
    wire    grp_invert4x4Matrix_double_s_fu_72_m_ce1;
    wire   [3:0] grp_invert4x4Matrix_double_s_fu_72_invOut_address0;
    wire    grp_invert4x4Matrix_double_s_fu_72_invOut_ce0;
    wire    grp_invert4x4Matrix_double_s_fu_72_invOut_we0;
    wire   [63:0] grp_invert4x4Matrix_double_s_fu_72_invOut_d0;
    reg    grp_invert4x4Matrix_double_s_fu_72_ap_start_reg;
    wire    ap_CS_fsm_state4;
    wire    ap_CS_fsm_state5;
    wire    ap_block_pp0_stage0;
    reg   [4:0] loop_index_fu_34;
    wire   [4:0] empty_fu_92_p2;
    wire   [3:0] empty_6_fu_98_p1;
    reg   [3:0] ap_NS_fsm;
    reg    ap_ST_fsm_state1_blk;
    wire    ap_ST_fsm_state4_blk;
    reg    ap_ST_fsm_state5_blk;
    reg    ap_idle_pp0;
    wire    ap_enable_pp0;
    wire    ap_ce_reg;

    // power-on initialization
    initial begin
        #0 ap_CS_fsm = 4'd1;
        #0 ap_enable_reg_pp0_iter0 = 1'b0;
        #0 ap_enable_reg_pp0_iter1 = 1'b0;
        #0 grp_invert4x4Matrix_double_s_fu_72_ap_start_reg = 1'b0;
        #0 loop_index_fu_34 = 5'd0;
    end

    main_tCameraToWorld_ROM_AUTO_1R #(
        .DataWidth(64),
        .AddressRange(16),
        .AddressWidth(4)
    ) tCameraToWorld_U (
        .clk(ap_clk),
        .reset(ap_rst),
        .address0(tCameraToWorld_address0),
        .ce0(tCameraToWorld_ce0),
        .q0(tCameraToWorld_q0)
    );

    main_tCameraToWorld_1_RAM_AUTO_1R1W #(
        .DataWidth(64),
        .AddressRange(16),
        .AddressWidth(4)
    ) tCameraToWorld_1_U (
        .clk(ap_clk),
        .reset(ap_rst),
        .address0(tCameraToWorld_1_address0),
        .ce0(tCameraToWorld_1_ce0),
        .we0(tCameraToWorld_1_we0),
        .d0(tCameraToWorld_q0),
        .q0(tCameraToWorld_1_q0),
        .address1(grp_invert4x4Matrix_double_s_fu_72_m_address1),
        .ce1(tCameraToWorld_1_ce1),
        .q1(tCameraToWorld_1_q1)
    );

    main_tWorldToCamera_RAM_AUTO_0R0W #(
        .DataWidth(64),
        .AddressRange(16),
        .AddressWidth(4)
    ) tWorldToCamera_U (
        .clk(ap_clk),
        .reset(ap_rst),
        .address0(grp_invert4x4Matrix_double_s_fu_72_invOut_address0),
        .ce0(grp_invert4x4Matrix_double_s_fu_72_invOut_ce0),
        .we0(grp_invert4x4Matrix_double_s_fu_72_invOut_we0),
        .d0(grp_invert4x4Matrix_double_s_fu_72_invOut_d0)
    );

    main_invert4x4Matrix_double_s grp_invert4x4Matrix_double_s_fu_72 (
        .ap_clk(ap_clk),
        .ap_rst(ap_rst),
        .ap_start(grp_invert4x4Matrix_double_s_fu_72_ap_start),
        .ap_done(grp_invert4x4Matrix_double_s_fu_72_ap_done),
        .ap_idle(grp_invert4x4Matrix_double_s_fu_72_ap_idle),
        .ap_ready(grp_invert4x4Matrix_double_s_fu_72_ap_ready),
        .m_address0(grp_invert4x4Matrix_double_s_fu_72_m_address0),
        .m_ce0(grp_invert4x4Matrix_double_s_fu_72_m_ce0),
        .m_q0(tCameraToWorld_1_q0),
        .m_address1(grp_invert4x4Matrix_double_s_fu_72_m_address1),
        .m_ce1(grp_invert4x4Matrix_double_s_fu_72_m_ce1),
        .m_q1(tCameraToWorld_1_q1),
        .invOut_address0(grp_invert4x4Matrix_double_s_fu_72_invOut_address0),
        .invOut_ce0(grp_invert4x4Matrix_double_s_fu_72_invOut_ce0),
        .invOut_we0(grp_invert4x4Matrix_double_s_fu_72_invOut_we0),
        .invOut_d0(grp_invert4x4Matrix_double_s_fu_72_invOut_d0)
    );

    always @(posedge ap_clk) begin
        if (ap_rst == 1'b1) begin
            ap_CS_fsm <= ap_ST_fsm_state1;
        end else begin
            ap_CS_fsm <= ap_NS_fsm;
        end
    end

    always @(posedge ap_clk) begin
        if (ap_rst == 1'b1) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else begin
            if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_enable_reg_pp0_iter0 <= 1'b0;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_enable_reg_pp0_iter0 <= 1'b1;
            end
        end
    end

    always @(posedge ap_clk) begin
        if (ap_rst == 1'b1) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else begin
            if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_enable_reg_pp0_iter1 <= 1'b0;
            end
        end
    end

    always @(posedge ap_clk) begin
        if (ap_rst == 1'b1) begin
            grp_invert4x4Matrix_double_s_fu_72_ap_start_reg <= 1'b0;
        end else begin
            if ((1'b1 == ap_CS_fsm_state4)) begin
                grp_invert4x4Matrix_double_s_fu_72_ap_start_reg <= 1'b1;
            end else if ((grp_invert4x4Matrix_double_s_fu_72_ap_ready == 1'b1)) begin
                grp_invert4x4Matrix_double_s_fu_72_ap_start_reg <= 1'b0;
            end
        end
    end

    always @(posedge ap_clk) begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            loop_index_fu_34 <= 5'd0;
        end else if (((exitcond1_fu_86_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            loop_index_fu_34 <= empty_fu_92_p2;
        end
    end

    always @(posedge ap_clk) begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            loop_index_cast_cast_reg_122[3 : 0] <= loop_index_cast_cast_fu_102_p1[3 : 0];
        end
    end

    always @(*) begin
        if ((ap_start == 1'b0)) begin
            ap_ST_fsm_state1_blk = 1'b1;
        end else begin
            ap_ST_fsm_state1_blk = 1'b0;
        end
    end

    assign ap_ST_fsm_state4_blk = 1'b0;

    always @(*) begin
        if ((grp_invert4x4Matrix_double_s_fu_72_ap_done == 1'b0)) begin
            ap_ST_fsm_state5_blk = 1'b1;
        end else begin
            ap_ST_fsm_state5_blk = 1'b0;
        end
    end

    always @(*) begin
        if ((exitcond1_fu_86_p2 == 1'd1)) begin
            ap_condition_pp0_exit_iter0_state2 = 1'b1;
        end else begin
            ap_condition_pp0_exit_iter0_state2 = 1'b0;
        end
    end

    always @(*) begin
        if (((grp_invert4x4Matrix_double_s_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done = 1'b1;
        end else begin
            ap_done = 1'b0;
        end
    end

    always @(*) begin
        if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_idle = 1'b1;
        end else begin
            ap_idle = 1'b0;
        end
    end

    always @(*) begin
        if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
            ap_idle_pp0 = 1'b1;
        end else begin
            ap_idle_pp0 = 1'b0;
        end
    end

    always @(*) begin
        if (((grp_invert4x4Matrix_double_s_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_ready = 1'b1;
        end else begin
            ap_ready = 1'b0;
        end
    end

    always @(*) begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tCameraToWorld_1_address0 = loop_index_cast_cast_reg_122;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            tCameraToWorld_1_address0 = grp_invert4x4Matrix_double_s_fu_72_m_address0;
        end else begin
            tCameraToWorld_1_address0 = 'bx;
        end
    end

    always @(*) begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tCameraToWorld_1_ce0 = 1'b1;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            tCameraToWorld_1_ce0 = grp_invert4x4Matrix_double_s_fu_72_m_ce0;
        end else begin
            tCameraToWorld_1_ce0 = 1'b0;
        end
    end

    always @(*) begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            tCameraToWorld_1_ce1 = grp_invert4x4Matrix_double_s_fu_72_m_ce1;
        end else begin
            tCameraToWorld_1_ce1 = 1'b0;
        end
    end

    always @(*) begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tCameraToWorld_1_we0 = 1'b1;
        end else begin
            tCameraToWorld_1_we0 = 1'b0;
        end
    end

    always @(*) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tCameraToWorld_ce0 = 1'b1;
        end else begin
            tCameraToWorld_ce0 = 1'b0;
        end
    end

    always @(*) begin
        case (ap_CS_fsm)
            ap_ST_fsm_state1: begin
                if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                    ap_NS_fsm = ap_ST_fsm_pp0_stage0;
                end else begin
                    ap_NS_fsm = ap_ST_fsm_state1;
                end
            end
            ap_ST_fsm_pp0_stage0: begin
                if ((~((exitcond1_fu_86_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                    ap_NS_fsm = ap_ST_fsm_pp0_stage0;
                end else if ((((exitcond1_fu_86_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                    ap_NS_fsm = ap_ST_fsm_state4;
                end else begin
                    ap_NS_fsm = ap_ST_fsm_pp0_stage0;
                end
            end
            ap_ST_fsm_state4: begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
            ap_ST_fsm_state5: begin
                if (((grp_invert4x4Matrix_double_s_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                    ap_NS_fsm = ap_ST_fsm_state1;
                end else begin
                    ap_NS_fsm = ap_ST_fsm_state5;
                end
            end
            default: begin
                ap_NS_fsm = 'bx;
            end
        endcase
    end

    assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

    assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

    assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

    assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

    assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

    assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

    assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

    assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

    assign ap_return = 32'd0;

    assign empty_6_fu_98_p1 = loop_index_fu_34[3:0];

    assign empty_fu_92_p2 = (loop_index_fu_34 + 5'd1);

    assign exitcond1_fu_86_p2 = ((loop_index_fu_34 == 5'd16) ? 1'b1 : 1'b0);

    assign grp_invert4x4Matrix_double_s_fu_72_ap_start = grp_invert4x4Matrix_double_s_fu_72_ap_start_reg;

    assign loop_index_cast_cast_fu_102_p1 = empty_6_fu_98_p1;

    assign tCameraToWorld_address0 = loop_index_cast_cast_fu_102_p1;

    always @(posedge ap_clk) begin
        loop_index_cast_cast_reg_122[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    end

endmodule  //main
